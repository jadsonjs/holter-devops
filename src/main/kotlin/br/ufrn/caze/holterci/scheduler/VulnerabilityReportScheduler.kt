package br.ufrn.caze.holterci.scheduler

import br.ufrn.caze.holterci.domain.ports.repositories.crud.ProjectRepository
import br.ufrn.caze.holterci.domain.services.security.VulnerabilityReportService
import br.ufrn.caze.holterci.repositories.UserJPARepository
import org.springframework.beans.factory.annotation.Value
import org.springframework.scheduling.annotation.Scheduled
import org.springframework.stereotype.Component
import java.time.LocalDateTime

/**
 * Scheduler that triggers the generation and sending of a monthly vulnerability report.
 *
 */
@Component
class VulnerabilityReportScheduler (
    private val reportService: VulnerabilityReportService,
    private val projectRepository: ProjectRepository,
    private val userRepository: UserJPARepository,
) {

    @Value("\${send.email-alert}")
    val sendEmailAlert: Boolean = false

    @Value("\${app.url}")
    val appUrl: String = "http://localhost:8080/holter"

    /**
     * The cron expression consists of six fields (second, minute, hour, day of the month, month, day of the week).
     * Here's a breakdown of the cron expression "0 0 0 * * ?":
     *
     * 0 in the second field specifies that the task should run at the start of the minute.
     * 0 in the minute field specifies that the task should run at the 0th minute.
     * 1 in the hour field specifies that the task should run at 1 am.
     * * in the day of the month and month fields means the task runs every day of every month.
     * ? in the day of the week field is a wildcard that allows the task to run on any day of the
     *
     * The * in the day of the month and month fields means the task runs every day of every month.
     * The ? in the day of the week field is a wildcard that allows the task to run on any day of the week.
     * The 0/5 in the minute field specifies that the task should run every 5 minutes.
     */
//    @Scheduled(cron = "0 0/2 * * * ?") // This cron expression runs the task every 2 minutes (for tests)
    @Scheduled(cron = "0 0 3 1 * ?") // This cron expression runs the task every month, on the 1st, at 3 AM
    fun scheduleMonthlyReport() {
        if (!sendEmailAlert) return
        println("---------------------------- starting vulnerability report sender at: "+LocalDateTime.now()+"  ---------------------------------------")

        val projects = projectRepository.findAll()
        require(projects.isNotEmpty()) { "No projects found, skipping scheduler" }

        val recipients = userRepository.findUsersEmailsSendAlert()
        require(recipients.isNotEmpty()) { "No users with alerts enabled, skipping scheduler" }

        reportService.generateAndSendReport(projects, recipients, appUrl)

        println("------------------------------- ending automatic vulnerability report sender at: "+LocalDateTime.now()+"  -----------------------------------------")
    }

}
