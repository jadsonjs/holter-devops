package br.ufrn.caze.holterci.controllers.security

import br.ufrn.caze.holterci.controllers.AbstractRestController
import br.ufrn.caze.holterci.domain.models.metric.Project
import br.ufrn.caze.holterci.domain.services.security.VulnerabilityReportService
import jakarta.validation.Valid
import org.springframework.http.HttpHeaders
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController
import java.nio.charset.StandardCharsets


@RestController
@RequestMapping("/api/report")
class VulnerabilityReportController
    (
    private val reportService: VulnerabilityReportService,
    )
    : AbstractRestController()
{

    /**
     * Download vulnerability report from a list of projects
     */
    @PostMapping("/download")
    fun downloadVulnerabilityReport(@Valid @RequestBody projects: List<Project>): ResponseEntity<ByteArray> {
        val pdfContent = reportService.generateReport(projects)

        val headers = HttpHeaders()
        headers.add(
            HttpHeaders.CONTENT_DISPOSITION,
            "attachment; filename=Vulnerability_Report.pdf"
        )
        headers.add(HttpHeaders.CONTENT_TYPE, "application/pdf")
        headers.add(HttpHeaders.CONTENT_ENCODING, StandardCharsets.UTF_8.name())

        return ResponseEntity(pdfContent, headers, HttpStatus.OK)
    }

}